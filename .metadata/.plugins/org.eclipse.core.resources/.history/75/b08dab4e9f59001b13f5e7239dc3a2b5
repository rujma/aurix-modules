/**********************************************************************************************************************
 * \file Cpu0_Main.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxCpu.h"
#include "IfxSmu.h"
#include "IfxScuWdt.h"
#include "IfxPort.h"
#include "Bsp.h"
#include "CustomDD/IfxLockstep.h"

#define LED     &MODULE_P33,0
#define LED1    &MODULE_P33,1
#define LED2    &MODULE_P33,2
#define WAIT_TIME   500

IfxCpu_syncEvent g_cpuSyncEvent = 0;

int core0_main(void)
{
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
    
    IfxPort_setPinModeOutput(LED, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinHigh(LED);

     IfxPort_setPinModeOutput(LED1, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
     IfxPort_setPinHigh(LED1);

     IfxPort_setPinModeOutput(LED2, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
     IfxPort_setPinLow(LED2);

    // SMU
    //SMU_KEYS.B.CFGLCK = 0xBC;  // unlock SMU configuration registers
    //SMU_PCTL.U = 0x83;           // enable SMU fault output (causes P33.8 transition)
    //SMU_FSP.B.MODE = 0;            // Fault Signaling Protocol configuration: 0=Bi-stable protocol

    //SMU_AG0FSP.U = 0x40000000;      // enable ALM3[30]

    IfxSmu_setAlarmConfig(&MODULE_SMU, IfxSmu_Alarm_Cpu0LockstepComparatorError, IfxSmu_AlarmConfig_nmi);
    IfxSmu_start(&MODULE_SMU);

    IfxLockstep_Status status = IfxLockstep_getLockstepStatus(0x00);

    if(status == IfxLockstep_Status_SingleCore)
    {
        while(1)
        {
            __asm("NOP");
        }
    }

    IfxLockstep_Trigger lsTrigger = IfxLockstep_Trigger_Ok;


    lsTrigger = IfxLockstep_testCheckerCore(0x00);

    while(1)
    {
        IfxPort_togglePin(LED);
        IfxPort_togglePin(LED1);
        wait(IfxStm_getTicksFromMilliseconds(BSP_DEFAULT_TIMER, WAIT_TIME));
    }
    return (1);
}
